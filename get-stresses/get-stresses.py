#!/usr/bin/python3
# -*- coding: utf-8 -*-

import unittest

def getExpectedTranscription(inp, style=1984, speed=0):
    '''Ця функція повертає очікувану транскрипцію
    @param input Вхідний рядок з наголосом, наприклад щаве!ль
    @param style Варіант вимови: 1984 (типове значення) - за словником
                 Погрібного. 2001 - за словником 2001-2003 років
    @param speed Швидкість мови. 0 - повільна; 1 - швидка.
    @returns Очікувану транскрипцію, наприклад шчаве!л\'
             Якщо існує декілька варіантів вимови, і вони відрізняються
             лише опціональною мʼякістю, вона береться у дужки (^')^
    '''
    return inp

class TestExpectedTranscription(unittest.TestCase):

    def performTest(self, tests):
        '''Викликає власно getExpectedTranscription з усіма можливими значеннями
           style і speed.
        @param tests Словник тестів. Ключ - параметр inp. Значення - якщо рядок,
                     то те, що має повернути getExpectedTranscription для будь-якого
                     значення решти параметрів. Якщо словник, має містити від двох до чотирьох
                     пари: ключ шифрує параметри style та speed. 'SD': S - або p (Погрібний),
                     або 2 (2001-2003); D - або п (повільно), або ш (швидко). Якщо вимова для
                     якихось пар однакова, можна ставити знак питання. Наприклад:
                     {
                        u'арти!стці': {
                            u'пп': u'арти!с\'ц\'і',
                            u'пш': u'арти!с\'ц\':і',
                            u'2?': u'арти!с\'ц\'і',
                        },
                        u'щаве!ль': u'шчаве!ль
                     }
        '''
        for i, o in tests.items():
            styles = (u'п', u'2')
            speeds = (u'п', u'ш')
            styleConvert = {u'п': 1984, u'2': 2001}
            speedConvert = {u'п': 0, u'ш': 1}
            values = {}
            if (isinstance(o, unicode)):
                for style in styles:
                    for speed in speeds:
                        values[style + speed] = o
            else:
                for key, val in o.items():
                    if key[0] == u'?':
                        for style in styles:
                            values[style + key[1]] = val
                    elif key[1] == u'?':
                        for speed in speeds:
                            values[key[0] + speed] = val
                    else:
                        values[key] = val
            self.assertEqual(len(values), 4, 'Помилка в тестах!!!')
            for key, val in values.items():
                params = {'inp': i, 'style': styleConvert[key[0]], 'speed': speedConvert[key[1]]}
                self.assertEqual(val, getExpectedTranscription(**params), (u'Вхідне слово: {' + params['inp'] + u'}, стиль: ' + unicode(params['style']) + u", швидкість: " + unicode(params['speed']) + u'; очікуємо: {' + val + '}').encode('utf-8'))

    def test_a_basic(self):
        pairs = {
            u'ша!пка': u'ша!пка',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_o_basic(self):
        pairs = {
            u'вода!': u'вода!',
            u'моту!зка': u'моу^ту!зка',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_o_complex(self):
        # не виявляє оу^ однокурсник, бордюр, рвонути, красоту
        pairs = {
            u'одноку!рсник': {
                u'2?': u'о*дноку!рсние^к',
                u'п?': u'одноку!рсние^к',
            },
            # Про слова іншомовного походжження словник 2001 не знає...
            'бордю!р': {
                u'п?': 'борд\'у!р',
                u'2?': 'боу^рд\'у!р',
            },
            # Про це також...
            u'добу!ти': {
                u'п?': u'добу!ти',
                u'2?': u'доу^бу!ти',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_weird_2001_o_before_stressed_i(self):
        # У словнику Погрібного написано, що "о" перед наголошеним
        # "і" має невеличнке наближення до "у", яке в словнику не
        # вказано. Словник 2001-2003 вказує це наближення рівнозначним
        # наближенню перед наголошенним "у".
        pairs = {
            u'порі!г': {
                u'2?': u'поу^р`і!г',
                u'п?': u'пор`і!г',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_u_basic(self):
        pairs = {
            u'кугуа!р': u'кугуа!р',

            # у -> у~
            u'аудито!рія': u'ау~дие^то!р`ійа',
            # Словник 2001-2003 вважає, що якщо існоє
            # відповідне слово з першою літерою "в", то
            # навіть коли воно пишеться з "у", вимовляється
            # все одно "у~", тобто "втрата" й "утрата"
            # вимовляються однаково... Дивні вони...
            u'утра!та': {
                u'2?': u'у~тра!та',
                u'п?': u'утра!та',
            },
            u'уто!пія': u'уто!пійа',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_i_basic(self):
        pairs = {
            u'діапазо!н': u'д\'іапазо!н',
            u'істо!та': u'істо!та',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_i_to_y_1(self):
        pairs = {
            # Словник 2001-2003 також дає варіанти
            # без наближення до "и", проте я це проігнорую.
            u'і!ноді': u'і!и^ноді',
            u'і!нколи': {
                u'п?': u'і!и^нколи',
                u'2?': u'і!и^нколие^',
            },
            u'і!нший': {
                u'п?': u'і!и^нший',
                u'2?': u'і!и^ншие^й',
            },
            u'і!нде': u'і!и^нде', # (у словнику 2001-2003 немає)
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_i_to_y_2(self):
        # Словник 2001-2003 не знає про таке
        pairs = {
            u'си!ній': {
                u'п?': u'си!н\'іи^й', # крім орудного відмінка?.. (треба ще почитати)
                u'2?': u'си!н\'ій',
            },
            u'мої!м': {
                u'п?': u'мойі!и^м',
                u'2?': u'моу^йі!м',
            },
            u'краї!на': {
                u'п?': u'крайі!и^на',
                u'2?': u'крайі!на',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_e_basic(self):
        pairs = {
            u'сте!жка': u'сте!жка',
            u'епо!ха': {
                u'2?': u'еи^по!ха',
                u'п?': u'епо!ха',
            },
            u'по!ле': {
                u'п?': u'по!ле',
                u'2?': u'по!леи^',
            },
            u'верба!': u'веи^рба!',
            u'прему!дрий': {
                u'п?': u'преи^му!дрий',
                u'2?': u'преи^му!дрие^й',
            },
            u'перли!на': u'пеи^рли!на',
            u'неді!йсний': {
                u'2?': u'неи^ді!йсние^й',
                u'п?': u'неи^ді!йсний',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_e_complex(self):
        pairs = {
            u'теплоте!хніка': u'те*плоте!хні\'іка',
            u'го!стеві': {
                u'п?': u'го!стев`і',
                u'2?': u'го!стеи^в`і',
            },
            u'болезаспокі!йливий': {
                'п?': u'бо*лезаспок\'і!йлие^вий',
                '2?': u'бо*лезаспоу^к\'і!йлие^вие^й',
            },
            'вечі!рка': {
                'п?': 'вие^ч`і!рка',
                '2?': 'веи^ч`і!рка',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_e_to_yi(self):
        pairs = {
            u'за!єць': u'за!йеі^ц\'',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_y_basic(self):
        pairs = {
            u'ми!ло': u'ми!ло',
            u'жва!вий': {
                u'п?': u'жва!вий',
                u'2?': u'жва!вие^й',
            },
            u'прийти!': {
                u'п?': u'прийти!',
                u'2?': u'прие^йти!',
            },
            u'до!брий': u'до!брий',
            u'роби!ти': {
                u'п?': u'роби!ти',
                u'2?': u'роби!тие^',
            },
            u'сидимо!': u'сие^дие^мо!',
            u'виде!лка': {
                'п?': u'веи^де!лка',
                '2?': u'вие^де!лка',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_y_complex(self):
        pairs = {
            u'широкоря!дний': {
                u'п?': u'ши*рокор`а!дний',
                u'2?': u'ши*рокор`а!дние^й',
            },
            u'пʼятикла!сник': u'пйатие^кла!сние^к',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_h_to_kh(self):
        pairs = {
            u'ле!гкість': u'ле!хк`іс\'т\'',
            u'пругки!й': u'пругки!й',
            u'о!біг': u'о!б`іг',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_w(self):
        pairs = {
            u'верств': u'верств', # у Погрібного в знеголошений
            u'вплив': u'у~плиу~',
            u'вʼюно!к': {
                u'2?': u'вйуно!к',
                u'п?': u'у~йуно!к',
            },
            u'вир': u'вир',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_z(self):
        pairs = {
            u'зці!лення': u'с\'ц\'іле!н\':а',
            u'ка!зка': u'ка!зка',
            # Щодо швидкості трохи не так:
            # розк - лише в повільному, без - і в нормальному
            # проте мені ліньки це враховувати наразі.
            u'розкида!ч': {
                '?0': u'розкие^да!ч',
                '?1': u'роские^да!ч',
            },
            u'безпе!ка': {
                '?0': u'беи^зпе!ка',
                '?1': u'беи^спе!ка',
            },
            # Словник 2001-2003 переважно оглушує приросток роз
            # перед "с", словник Погрібного - ніколи.
            u'розси!пати': {
                '2?': u'рос:и!патие^',
                'п?': u'розси!пати',
            },
            u'ро!зсип': u'ро!зсие^п',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_odzvinchennia(self):
        pairs = {
            u'боротьба!': u'бород\'ба!',
            u'вокза!л': u'воґза!л',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_dz_dzh(self):
        pairs = {
            u'джаз': u'ДЖаз',
            u'дзвона!р': u'ДЗвона!р',
            u'віджима!ти': {
                u'п?': u'в`іДЖжие^ма!ти',
                u'2?': u'в`іДЖие^ма!тие^',
            },
            u'піджа!к': u'п`іДЖа!к',
            u'підзві!тний': {
                u'п?': u'п`іДЗзв`і!тний',
                u'2?': u'п`іДЗв`і!тние^й',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_mjakyj(self):
        pairs = {
            u'лі!кар': u'л\'і!кар',
            u'блок': u'блок',

            u'ба!лка': u'ба!лка',
            u'сир': u'сир',
            u'верф': u'верф',
            u'ма!ма': u'ма!ма',
            u'біб': u'б`іб',
            u'під': u'п`ід',
            u'він': u'в`ін',
            u'між': u'м`іж',
            u'фігу!ра': u'ф`ігу!ра',

            u'ги!чка': u'ги!чка',
            u'кит': u'кит',
            u'хи!ба': u'хи!ба',
            u'ґа!ва': u'ґа!ва',
            u'гірки!й': u'г`ірки!й',
            u'хі!ба': u'х`і!ба',
            # У словнику Погрібного не знайшов помʼякшене ґ
            u'ле!ґінь': u'ле!ґ`ін\'',

            u'ча!ша': u'ча!ша',
            u'джем': u'ДЖем',
            u'шар': u'шар',
            u'жах': u'жах',
            u'чіп': u'ч`іп',
            u'ло!джія': u'ло!ДЖ`ійа',
            u'ші!стка': u'ш`істка',
            u'жі!нка': u'ж`і!нка',

            u'пала!ц': u'пала!ц',
            u'ціпо!к': u'ц\'іпо!к',

            u'ра!нок': u'ра!нок',
            u'рі!чка': u'р`і!чка',

            u'дар': u'дар',
            u'та!нок': u'та!нок',
            u'нара!да': u'нара!да',
            u'за!грава': u'за!грава',
            u'сон': u'сон',
            u'дзе!ркало': u'ДЗе!ркало',
            u'дід': u'д\'ід',
            u'тінь': u'т\'ін\'',
            u'ніч': u'н\'іч',
            u'зір': u'з\'ір',
            u'сім': u'с\'ім',
            u'дзьоб': u'ДЗ\'об',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_tverdyj_pered_i(self):
        pairs = {
            u'безіме!нний': {
                '2?': u'беи^з(^\')^іме!н:ие^й',
                'п?': u'беи^зіме!н:ий',
            },
            u'педінститу!т': u'пе*дінстие^ту!т',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_mjakist_podvijna(self):
        pairs = {
            # Згідно з орфоепічним словником Погрібного, приголосні з групи (з с ДЗ ц н л д т)
            # помʼякшуються перед приголосним з тієї ж групи ...

            u'галу!ззя': u'галу!з\':а',
            u'ви!мажся': u'ви!маз\'с\'а',
            u'їздці!в': u'йіз\'ДЗ\'ц\'іу~',
            u'ни!зці': u'ни!з\'ц\'і',
            u'зліт': {
                u'2?': u'з\'л\'іт',
                u'п?': u'зл\'іт',
            },
            u'зді!бність': {
                u'2?': u'з\'д\'і!бн\'іс\'т\'',
                u'п?': u'зд\'і!бн\'іс\'т\'',
            },
            u'уро!зтіч': {
                u'2?': 'уро!з\'т\'іч',
                u'п?': 'уро!cт\'іч',
            },
            u'коло!сся': u'коло!с\':а',
            u'ка!сці': u'ка!с\'ц\'і',
            u'весля!р': u'веи^с\'л\'я!р',
            u'ємні!сть': u'йеи^мні!с\'т\'',
            u'наддзьо!бок': u'наДЗ\':о!бок', # (у Погрібного не знайшов)
            u'пфа!льцський': u'пфа!л\'ц\'с\'кий', # (у Погрібного не знайшов цсь)
            u'ворі!тця': u'вор`і!ц\':а',
            u'мі!цність': u'м`і!ц\'н\'іс\'т\'',
            u'ги!цлі': u'ги!ц\'л\'і',
            u'горте!нзія': u'горте!н\'з\'ійа',
            u'ано!нсів': u'ано!н\'с\'іу~',
            u'ланцю!г': u'ла!н\'ц\'у!г',
            u'змага!ння': u'змага!н\':а',
            u'фінля!ндський': {
                u'2?': u'фін\'л\'а!н\'ДЗ\'кие^й', # с немає...
                u'п?': u'фін\'л\'а!н\'ДЗ\'с\'кий', # с нагорі...
            },
            u'інді!йка': u'ін\'д\'і!йка', # (гадаю, в Погрібному просто одрук - непомʼякшене д)
            u'ма!нтія': u'ма!н\'т\'ійа',
            # л'з' крім заволзький; майже всюди мʼякий знак
            u'заво!лзький': {
                u'2?': u'заво!лз\'кие^й',
                u'п?': u'заво!лз\'кий',
            },
            u'та!волзі': u'та!вол\'з\'і',
            # Знайшов лише кочержилні й рогачилні (решта з мʼяким знаком)
            u'кочержи!лні': u'кочеи^ржи!л\'н\'і', # (на жаль, у Погрібного немає цього відмінку)
            u'ллю': u'л\':у',
            # крім мілдью
            u'фа!лді': {
                u'2?': u'фа!л\'д\'і',
                u'п?': u'фа!лд\'і', # чому?.. Інших прикладів не знайшов.
            },
            # Надзвичайно дивний словник:
            # л помʼякшується в балтієць балтійський ґвалті ґвалтівник збольтіть кшталті шталті
            # проте не помʼякшується в болті болтів ґвалтівни!й прибалті!йський
            # Ну як так можна?..
            u'ба!лтієць': {
                u'п?': u'ба!лт\'ійеі^ц\'',
                u'2?': u'ба!л\'т\'ійеі^ц\'',
            },
            u'дні': u'д\'н\'і',
            # Щодо 'д' перед 'л' все дивно:
            u'за!для': {
                u'2?': u'за!д(^\')^л\'а',
                u'п?': u'за!д\'л\'а',
            },
            u'підлі!сок': {
                u'п?': 'п`ідл\'і!сок',
                u'2?': 'п`ід(^\')^л\'і!сок',
            },
            u'ві!длік': {
                u'2?': u'ві!д\'л\'ік',
                u'п?': u'ві!дл\'ік', # (бо приросток "від")
            },
            #+дд суддя
            u'суддя!': u'суд\':а!',
            u'звідтіля!': u'зв`ід\'т\'іл\'а!',
            u'роби!ться': u'роби!ц\':а', # цього не знайшов...
            u'тлі!нь': u'т\'л\'!ін\'',
            u'життя!': u'жие^т\':а!',

            # Також словник 2001-2003 у "зн", "сн" і "тн"
            # ставить опціональне помʼякшення ...

            u'ку!зня': {
                u'п?': u'ку!з\'н\'а',
                u'2?': u'ку!з(^\')^н\'а',
            },
            u'сніг': {
                u'2?': u'с(^\')^н\'іг',
                u'п?': u'с\'н\'іг',
            },
            u'пу!тній': {
                u'2?': u'пу!т(^\')^н\'ій',
                u'п?': u'пу!т\'н\'іи^й',
            },

            # ... А в цт, лц, нДЗ не помʼякшує зовсім.

            u'о!цті': u'о!цт\'і', # у Погрібного немає цієї форми
            u'гі!лці': {
                u'2?': u'г`і!лц\'і',
                u'п?': u'г`і!л\'ц\'і',
            },

            # немає в словнику: сз, сДЗ, сд, ДЗз, ДЗс,
            # ДЗн, ДЗл, ДЗд, ДЗт, цз, цДЗ, цд, лс (всюди мʼякий знак),
            # лДЗ (всюди мʼякий знак), дз, дс, дДЗ, дц, тз, тДЗ,
            # тц (обротьці), тд
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_mjakist_vidminky(self):
        # д т з с перед кінцевим мʼяким основи прикметників твердої...
        pairs = {
            u'наро!дні': u'наро!д(^\')^н\'і',
            u'па!мʼятні': u'па!мйат(^\')^н\'і',
            u'о!бразні': u'о!браз(^\')^н\'і',
            u'барви!сті': {
                '2?': u'барви!с\'т\'і',
                'п?': u'барви!с(^\')^т\'і',
            }
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_2001_zscDZ_before_hubni(self):
        # Згідно зі словником Погрібного,
        # з ц с ДЗ перед напівпомʼякшеними губними можуть помʼякшуватися.
        # Словник 2001-2003 про це згадує в передмові (10 сторінка), проте
        # в транскрипціях не ставить навіть опціональної можливості...
        # зб - збіг (у Погрібного теж не помʼякшується)
        # зв - звір (у Погрібного мʼяке з, проте далеко не всюди)
        # зм - зміна (у Погрібного теж не помʼякшується)
        # сб - лесбіянка (У Погрібного не помʼякшується, а в 2001 чомусь не одзвінчилося...)
        # сп - аспірин (у Погрібного не помʼякшується)
        # св - свято, світ (у Погрібного помʼякшується всюди крім свій)
        # см - сміх
        # сф - сфінкс (у Погрібного не помʼякшується)
        # ДЗв - ДЗвін (у Погрібного теж не помʼякшується, крім дзвякнути)
        # цв - цвях

        # немає наступних пар:
        # зф цб цм цф ДЗб ДЗп ДЗф
        # зп (тільки префікс)
        # цп (спецпідготовка)
        # ДЗм (підзміна)

        pairs = {
            u'збіг': u'зб`іг',
            u'звір': {
                u'п?': u'з\'в`ір',
                u'2?': u'зв`ір',
            },
            u'зміна': u'зм`іна',
            u'лесбі!йський': {
                u'2?': u'леи^сб`і!йс\'кие^й',
                u'п?': u'леи^зб`і!йс\'кий',
            },
            u'аспіри!н': u'асп`іри!н',
            u'свято': {
                u'2?': u'св`ато',
                u'п?': u'с\'в`ато',
            },
            u'сміх': {
                '2?': u'см`іх',
                'п?': u'с\'м`іх',
            },
            u'сфінкс': u'сф`інкс',
            u'дзвін': u'ДЗв`ін',
            u'цвях': {
                '2?': u'цв`ах',
                'п?': u'ц\'в`ах',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_prefix_pomjakshennia(self):
        pairs = {
            # Тут мене починає переслідувати відчуття, що 2001-2003 просто
            # знущається. "безьдіяльний"?.. Але "сцідити"?..

            # Зубні в кінці префікса перед мʼякими зубними
            # звичайно не помʼякшуються (2001 - навпаки)
            u'бездія!льний': {
                u'2?': u'беи^з\'д\'ійа!л\'ние^й',
                u'п?': u'беи^зд\'ійа!л\'ний',
            },
            u'ро!зділ': { 
                u'п?': u'ро!зд\'іл',
                u'2?': u'ро!з\'д\'іл',
            },
            u'ро!зліт': {
                u'2?': u'роз\'л\'іт',
                u'п?': u'розл\'іт',
            },
            u'розсі!яти': {
                u'2?': u'роу^с\':і!л',
                u'п?': u'розс\'і!л', # Також у Погрібного є варіант рос'іл...
            },
            # виняток
            u'роззя!ва': u'роз\':а!ва',
            # Помʼякшуються тільки префіксальний д перед д' т' н'
            u'відділи!ти': {
                'п?': u'в`ід\':іли!ти',
                '2?': u'в`ід\':іли!тие^',
            },
            u'надті!с': u'над\'т\'і!с',
            u'підні!жжя': {
                u'2?': u'п\'ід(^\')^н\'іж\':а',
                u'п?': u'п\'ід\'н\'іж\':а',
            },
            # Також ДЗ перед с' ц' (2001 проти помʼякшення перед с)
            u'підсі!в': {
                u'2?': u'п\'іДЗс\'і!у~',
                u'п?': u'п\'іДЗ\'с\'і!у~',
            },
            u'пі!дтюпцем': {
                u'п?': u'пі!д\'т\'упцеи^м',
                u'2?': u'пі!д(^\')^т\'упцеи^м',
            },
            u'відціля!': u'в`іДЗ\'ц\'іл\'а!',
            # І з перед c' ц'
            u'зсіда!ння': u'c\':іда!н\':а',
            u'зці!лення': u'c\'ц\'ілие^н\':а',
            # Та префікс с перед т'
            u'стяг': u'с\'т\'аг',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_simple_podovzhennia(self):
        pairs = {
            u'знання!': u'знан\':а!',
            u'обби!ти': {
                u'п?': u'об:и!ти',
                u'2?': u'об:и!тие^',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_assimilations(self):
        pairs = {
            u'прині!сши': {
                'п?': u'прие^ні!ш:и',
                '2?': u'прие^ні!ш:ие^',
            },
            u'зві!зши': {
                'п?': u'зв`і!жши',
                '2?': u'зв`і!жшие^',
            },
            u'зшива!ння': u'ш:ива!н\':а',
            u'зжа!ти': {
                u'п?': u'ж:а!ти',
                u'2?': u'ж:а!тие^',
            },
            u'безжа!лісний': {
                u'п?': u'беи^ж:а!л\'існий',
                u'2?': u'беи^ж:а!л\'існие^й',
            },
            u'безче!сний': {
                u'п?': u'беи^жче!сний',
                u'20': u'беи^жче!сние^й',
                u'21': u'беи^шче!сние^й',
            },
            u'зчи!стити': {
                u'п?': u'шчи!стие^ти',
                u'2?': u'жчи!стие^тие^',
            },
            u'милу!єшся': u'милу!йеі^c\':а',
            u'зва!жся': u'зва!з\'с\'а',
            u'моро!чся': {
                u'п?': u'моро!ц\'с\'а',
                u'2?': u'моро!ц\':а',
            },
            u'до!шці': u'до!c\'ц\'і',
            u'сму!жці': u'сму!з\'ц\'і',
            u'ху!сточці': u'ху!стоц\':і',
            u'ві!дступ': {#+
                u'п?': u'в`і!ДЗступ',
                u'2?': u'в`і!ДЗтуп',
            },
            u'відцентро!вий': {#+
                u'п?': u'в`іДЗцеи^нтро!вий',
                u'2?': u'в`іДЗцеи^нтро!вие^й',
            },
            u'відшарува!ння': u'в`іДЖшарува!н\':а',
            u'відчайду!шність': u'в`іДЖчайду!шн\'іс\'т\'',
            u'віджива!ти': {#+
                u'п?': u'в`іДЖжие^ва!ти',
                u'2?': u'в`іДЖие^ва!тие^',
            },
            u'ві!дзвук': {#+
                u'п?': u'в`і!ДЗзвук',
                u'2?': u'в`і!ДЗвук',
            },
            u'бра!тство': u'бра!цтво',#+
            u'кори!тце': {
               u'п?': u'кори!ц:е',
               u'2?': u'кори!ц:еи^',
            },
            u'бага!тшати': {
                u'п?': u'бага!чшати',
                u'2?': u'бага!чшатие^',
            },
            u'квітча!ння': u'кв`іч:ан\':а',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_assimilations_across_words(self):
        pairs = {
            u'з джерела!': u'ж ДЖерела!',
            u'ваш син': u'ваш син',
            u'де ж сир': u'де ж сир',
            u'ніч ці!ла': u'ніч ціла',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_simplifications(self):
        pairs = {
            u'студе!нтський': {
                u'п?': u'студе!н\'с\'кий',
                u'2?': u'студе!н\'с\'кие^й',
            },
            u'тури!стський': {
                'п?': 'тури!с\'кие^й',
                '2?': 'тури!с\'кий',
            },
            u'аге!нтство': u'аге!нство',
            u'арти!стці': 'арти!с\'ц\'і',
            u'неві!стчин': {
                u'2?': u'неи^в`і!шч:ие^н',
                u'п?': u'ние^в`і!шчие^н',
            },
            u'шістде!сят': {
                u'п?': u'ш`іздеи^с\'а!т',
                u'2?': u'ш`істдеи^с\'а!т',
            },
            u'шістсо!т': u'ш`іс:о!т',
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_chn_exceptions(self):
        pairs = {
            u'со!нячний': {
                u'п?': u'со!н\'ашний',
                u'2?': u'со!н\'ачние^й',
            },
            u'я!чні': {
                u'п?': u'йа!шн\'і',
                u'2?': u'йа!чн\'і',
            },
            u'смачни!й': {
                u'п?': u'смашни!й',
                u'2?': u'смачни!й',
            },
            u'яє!чня': {
                u'п?': u'йайе!шн\'я',
                u'2?': u'йайе!чн\'я',
            },
            u'пшени!чний': {
                u'2?': u'пшеи^ни!чние^й',
                u'п?': u'пшие^ни!шний',
            },
            u'моло!чний': {
                u'п?': u'моло!шний', #!!!! різні значення...
                u'2?': u'моло!чние^й',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_double(self):
        pairs = {
            u'щит': u'шчит',

            u'ярмо!': u'йармо!',
            u'ю!шка': u'йу!шка',
            u'єно!т': u'йеи^но!т',
            u'їжа!к': u'йіжа!к',

            u'мʼя!з': u'мйа!з',
            u'адʼю!нкт': u'адйу!нкт',
            u'карʼєр': u'карйе!р',
            u'підʼї!зд': u'п`ідйі!зд',

            u'князь': u'кн\'аз\'',
            u'люсте!рко': u'л\'усте!рко',
            u'си!нє': {
                u'2?': u'си!н\'еи^',
                u'п?': u'си!н\'е',
            },
        }
        self.performTest(pairs)

    @unittest.skip("Далі буде")
    def test_weird_2001(self):
        # Теоретично т'c' має переходити в ц':
        # Проте в словнику 2001-2003 для слова вʼяляться чомусь зроблено виняток...
        pairs = {
            u'вʼяля!ться': {
                u'2?': u'вйал\'а!т\'с\'а',
                u'п?': u'у~йал\'а!ц\':а',
            },
        }
        self.performTest(pairs)

if __name__ == '__main__':
    unittest.main()
